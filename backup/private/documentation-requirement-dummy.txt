I am writing an npm package named "Mapping Tools" and need inspiration.
Can you help me create an authoritative documentation for a TypeScript npm package
I want to showcase each best practice used to do a modern readme file
Follow all the convention and requirement for a professional npm package
Make the documentation user-friendly with navigation and Table of Contents

The package is based on 5 core function (main functions)
The name of the 5 core functions of my pakage are as follow:

awaitedMapping, parallelMapping, serialMapping, generateMappingAsync, and generateMapping

The list of thier main input type is as follow:
  - serialMapping takes as its main input: `Iterable<Base<T>> | Iterable<PromiseLike<Base<T>>>` or `PromiseLike<Iterable<Base<T>>>`
  - awaitedMapping takes as its main input: `Iterable<Base<T> | PromiseLike<Base<T>>>` or `PromiseLike<Iterable<Base<T>> | Iterable<PromiseLike<Base<T>>>>`
  - parallelMapping takes as its main input: `Iterable<Base<T> | PromiseLike<Base<T>>>` only
  - generateMappingAsync takes as its main input: `Iterable<Base<T> | PromiseLike<Base<T>>>` only
  - generateMapping takes as its main input: `Iterable<Base<T> | PromiseLike<Base<T>>>` only


the 5 core functions each take a main input type called a collection and
4 more arguments called delgates functions:

collection, transformFn, lookupFn, validateFn, and errLookupFn

the 4 delegates functions are described as follow:
  - `transformFn: TransformFn<T, R> = async value => value as any as R`: A callback function that is applied to each item in the collection. It takes an item of type `T` as input and returns a value of type `R`.
  - `lookupFn: LookupFn<T, R> = v => void v`: A callback function that is applied to each item in the collection. It takes an item of type `T` as input and returns a value of type `R`.
  - `validateFn: ValidateFn<T, R> = async v => void v`: A callback function that is applied to each item in the collection. It takes an item of type `T` as input and returns a value of type `R`.
  - `errLookupFn: ErrLookupFn = v => void v`: A callback function that is applied to each item in the collection. It takes an item of type `T` as input and returns a value of type `R`.

The list of the 5 core function return type is as follow:
  - serialMapping returns: `Promise<Array<Settled<R>>>`
  - awaitedMapping returns: `Promise<Array<Settled<R>>>`
  - parallelMapping returns: `Array<Promise<Settled<R>>>`
  - generateMappingAsync returns: `AsyncGenerator<Settled<R>, void, unknown>`
  - generateMapping returns: `Generator<Promise<Settled<R>>, void, unknown>`


The package defines one main Base Type

type Base<TBase> =
  | TBase
  | Settled<TBase>
  | PromiseSettledResult<TBase>
  | SettledRight<TBase>
  | PromiseFulfilledResult<TBase>
  | SettledLeft
  | PromiseRejectedResult;

The package may use genric type T to denotate a specific inpput type
The package may use genric type R to denotate a specific output type
The package may use genric type B to denotate a specific T_Like type
that would result in an underlaying Base<T_Like> / Base<B> type

the documentation defines aliases to make it easier to the reader:

type Deferred<B> = PromiseLike<Base<B>>;
type BaseOrDeferred<B> = Base<B> | Deferred<B>;
type Collection<B> = Iterable<Base<B>> | Iterable<Deferred<B>>;
type DeferredCollection<B> = Collection<B> | Deferred<Collection<B>>;

The package define the type Settled<T> = SettledLeft | SettledRight<T>
the type Settled<T> is analogus to the TypeScript type PromiseSettledResult<T>
Based on the functional programing concept of either Settled<T> has two sides
it has a wrong and bad type SettledLeft = PromiseRejectedResult & {
  status: 'rejected';
  reason: any;
  value?: undefined;
  rejected: any;
  fulfilled: null;
  transformStep: number;
  currentRejection: true | false | undefined;
  index: number;
};


and it has a nice and good type SettledRight<T> = PromiseFulfilledResult<T> & {
  status: 'fulfilled';
  value: T;
  reason?: undefined;
  fulfilled: T;
  rejected: null;
  transformStep: number;
  currentRejection: null;
  index: number;
};

for reference TypeScript provides:


interface PromiseFulfilledResult<T> {
    status: "fulfilled";
    value: T;
}

interface PromiseRejectedResult {
    status: "rejected";
    reason: any;
}

type PromiseSettledResult<T> = PromiseFulfilledResult<T> | PromiseRejectedResult;

The Settled type is a way to handle possible errors and represent
the result or failure of some operation in this context.
The SettledLeft type represents a rejected curent or passed
transformation  with additional properties.
The SettledRight type represents a fulfilled transformation
with additional properties.
Both types provide additional information about the status and
outcome of the operation (transformation) they represent.


Describe the package and its features in the introduction
Put emphasize on the structure more than the content
Include all the sections most packages would have
A section that would describe the API
A section that would provided examples of how to use the package
Show example for esm and comonjs
Show the instalation for npm, yarn and pnpm...
Under the title in the header include 1 badge from shields.io
If required you can use the [[PLACE HOLDER]] notation.
name the package Mapping Tools (mapping-tools) instead  and use these badges only
I provided a header and footer snipets below
HEADER would look like this please:

# Mapping Tools

![npm type definitions](https://img.shields.io/npm/types/mapping-tools?label=Powered%20by)

FOOTER please end this template with:

### Copyright © 2022 · LUXCIUM · (Benjamin Vincent) · luxcium﹫neb4o1.com

† Scientia est lux principium✨ ™

<sup>Text generated by an [AI language model](https://openai.com/) has been used in this work.</sup>


Arguments
collection: Iterable<Base<T>> | Iterable<PromiseLike<Base<T>>> | PromiseLike<Iterable<Base<T>>>: The collection of items to be iterated or mapped over. The collection can be either an iterable or a combination of an iterable and a promise of an iterable. The Base<T> type represents a resolved or rejected promise, or a value. It can be one of the following:

TBase: The resolved value of a promise.
Settled<TBase>: An object representing a resolved or rejected promise, with a status field indicating the status of the promise and a value or reason field containing the resolved value or rejection reason, respectively.
PromiseSettledResult<TBase>: An object representing a resolved or rejected promise, with a status field indicating the status of the promise and a value or reason field containing the resolved value or rejection reason, respectively.
SettledRight<TBase>: An object representing a resolved promise, with a status field equal to 'fulfilled' and a value field containing the resolved value.
PromiseFulfilledResult<TBase>: An object representing a resolved promise, with a status field equal to 'fulfilled' and a value field containing the resolved value.
SettledLeft: An object representing a rejected promise, with a status field equal to 'rejected' and a reason field containing the rejection reason.
PromiseRejectedResult: An object representing a rejected promise, with a status field equal to 'rejected' and a reason field containing the rejection reason.
callback: (item: T) => U: A callback function that is applied to each item in the collection.

thisArg?: any: An optional value to use as this when executing the callback.

limit?: number: An optional


## Arguments

- `collection: Iterable<Base<T>> | Iterable<PromiseLike<Base<T>>> | PromiseLike<Iterable<Base<T>>>`: The collection of items to be iterated or mapped over. The collection can be either an iterable or a combination of an iterable and a promise of an iterable. The `Base<T>` type represents a resolved or rejected promise, or a value. It can be one of the following:
  - `TBase`: The resolved value of a promise.
  - `Settled<TBase>`: An object representing a resolved or rejected promise, with a `status` field indicating the status of the promise and a `value` or `reason` field containing the resolved value or rejection reason, respectively.
  - `PromiseSettledResult<TBase>`: An object representing a resolved or rejected promise, with a `status` field indicating the status of the promise and a `value` or `reason` field containing the resolved value or rejection reason, respectively.
  - `SettledRight<TBase>`: An object representing a resolved promise, with a `status` field equal to `'fulfilled'` and a `value` field containing the resolved value.
  - `PromiseFulfilledResult<TBase>`: An object representing a resolved promise, with a `status` field equal to `'fulfilled'` and a `value` field containing the resolved value.
  - `SettledLeft`: An object representing a rejected promise, with a `status` field equal to `'rejected'` and a `reason` field containing the rejection reason.
  - `PromiseRejectedResult`: An object representing a rejected promise, with a `status` field equal to `'rejected'` and a `reason` field containing the rejection reason.


- `callback: (item: T) => U`: A callback function that is applied to each item in the collection.



Base<TBase>: This type represents a resolved or rejected promise, or a value. It is made up of several subtypes, such as Settled<TBase>, PromiseSettledResult<TBase>, SettledRight<TBase>, PromiseFulfilledResult<TBase>, SettledLeft, and PromiseRejectedResult.
Deferred<B>: This is an alias type that represents a promise-like object that can be used for async operations. It is defined as PromiseLike<Base<B>>.
BaseOrDeferred<B>: This type represents either a resolved or rejected promise, or a value, as represented by the Base<B> type, or a promise-like object that can be used for async operations, as represented by the Deferred<B> type.
Collection<B>: This type represents an iterable of either resolved or rejected promises, or values, as represented by the Base<B> type, or promise-like objects that can be used for async operations, as represented by the Deferred<B> type.
DeferredCollection<B>: This type represents either an iterable of either resolved or rejected promises, or values, as represented by the Base<B> type, or promise-like objects that can be used for async operations, as represented by the Deferred<B> type, or a promise-like object that represents an iterable of either resolved or rejected promises, or values, as represented by the Base<B> type, or promise-like objects that can be used for async operations, as represented by the Deferred<B> type.


# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
## Table of Contents
## Installation
## Getting Started
## Base types
## Usage Overview
## Main (core) functions
### Overview
### Arguments
### parallelMapping
### serialMapping
### awaitedMapping
### generateMapping
### generateMappingAsync
### Return Types

The list of the 5 core function return types is as follows:

- **Functions that return arrays**
  - [parallelMapping returns](#parallelmapping-signature): `Array<Promise<Settled<R>>>`
- **Functions that return promises that resolve to arrays**
  - [serialMapping returns](#serialmapping-signature): `Promise<Array<Settled<R>>>`
  - [awaitedMapping returns](#awaitedmapping-signature): `Promise<Array<Settled<R>>>`
- **Functions that return generators**
  - [generateMapping returns](#generatemapping-signature): `Generator<Promise<Settled<R>>, void, unknown>`
  - [generateMappingAsync returns](#generatemappingasync-signature): `AsyncGenerator<Settled<R>, void, unknown>`

## Summary
### Delegates functions
### Types





## Introduction to "Mapping Tools"
The "Mapping Tools" npm package provides a set of utility functions for working with collections of items, where each item can be a value or a promise. The package defines a main type, Base<TBase>, which represents either a resolved or rejected promise, or a value.

## Core Functions and Delegate Functions
The package includes 5 core functions: serialMapping, awaitedMapping, parallelMapping, generateMappingAsync, and generateMapping. These functions each take a collection of items as their main input, along with 4 delegate functions: transformFn, lookupFn, validateFn, and errLookupFn. The transformFn function is applied to each item in the collection, and takes an item of type T as input and returns a value of type R. The lookupFn, validateFn, and errLookupFn functions are applied to each item in the collection and take an item of type T as input.

## Aliases for Simplified Documentation
The package defines several aliases to simplify the documentation and make it easier for readers to understand the types and functions. These include Deferred<B>, which represents a promise-like object that can be used for async operations; BaseOrDeferred<B>, which represents either a resolved or rejected promise, or a value, or a promise-like object; Collection<B>, which represents an iterable of either resolved or rejected promises or values; and DeferredCollection<B>, which represents a collection or a promise-like object that resolves to a collection.

## The Settled<T> Type
The package also defines a type called Settled<T>, which is analogous to the TypeScript type PromiseSettledResult<T>. Settled<T> has two sides: a "bad" type called SettledLeft, which represents a rejected promise, and a "good" type called SettledRight<T>, which represents a fulfilled promise.

## Summary
In summary, the "Mapping Tools" npm package provides a set of utility functions for working with collections of items, where each item can be a value or a promise, and includes several types and aliases to simplify the documentation and make it easier for readers to



## Main Type: Base<TBase>

The "Mapping Tools" npm package provides a set of utility functions for working with collections of items, where each item can be a value or a promise. The package defines a main type, Base<TBase>, which represents either a resolved or rejected promise, or a value.

## Core Functions: serialMapping, awaitedMapping, parallelMapping, generateMappingAsync, and generateMapping

The package includes 5 core functions: serialMapping, awaitedMapping, parallelMapping, generateMappingAsync, and generateMapping. These functions each take a collection of items as their main input, along with 4 delegate functions: transformFn, lookupFn, validateFn, and errLookupFn. The transformFn function is applied to each item in the collection, and takes an item of type T as input and returns a value of type R. The lookupFn, validateFn, and errLookupFn functions are applied to each item in the collection and take an item of type T as input.

## Aliases: Deferred<B>, BaseOrDeferred<B>, Collection<B>, and DeferredCollection<B>

The package defines several aliases to simplify the documentation and make it easier for readers to understand the types and functions. These include Deferred<B>, which represents a promise-like object that can be used for async operations; BaseOrDeferred<B>, which represents either a resolved or rejected promise, or a value, or a promise-like object; Collection<B>, which represents an iterable of either resolved or rejected promises or values; and DeferredCollection<B>, which represents a collection or a promise-like object that resolves to a collection.

## Type: Settled<T>

The package also defines a type called Settled<T>, which is analogous to the TypeScript type PromiseSettledResult<T>. Settled<T> has two sides: a "bad" type called SettledLeft, which represents a rejected

Section 1: Introduction

The "Mapping Tools" npm package provides a set of utility functions for working with collections of items, where each item can be a value or a promise. The package defines a main type, Base<TBase>, which represents either a resolved or rejected promise, or a value.

Section 2: Core Functions

The package includes 5 core functions: serialMapping, awaitedMapping, parallelMapping, generateMappingAsync, and generateMapping. These functions each take a collection of items as their main input, along with 4 delegate functions: transformFn, lookupFn, validateFn, and errLookupFn. The transformFn function is applied to each item in the collection, and takes an item of type T as input and returns a value of type R. The lookupFn, validateFn, and errLookupFn functions are applied to each item in the collection and take an item of type T as input.

Section 3: Aliases

The package defines several aliases to simplify the documentation and make it easier for readers to understand the types and functions. These include Deferred<B>, which represents a promise-like object that can be used for async operations; BaseOrDeferred<B>, which represents either a resolved or rejected promise, or a value, or a promise-like object; Collection<B>, which represents an iterable of either resolved or rejected promises or values; and DeferredCollection<B>, which represents a collection or a promise-like object that resolves to a collection.

Section 4: Settled<T> Type

The package also defines a type called Settled<T>, which is analogous to the TypeScript type PromiseSettledResult<T>. Settled<T> has two sides: a "bad" type called SettledLeft, which represents a rejected promise, and a "good" type called SettledRight<T>, which represents a fulfilled promise.

Section 5: Summary

In summary, the "Mapping Tools" npm package provides a set of utility functions for working with collections of items, where each item can be a value or a promise. The package defines a main type, Base<TBase>, which represents either a resolved or rejected promise, or a value. The package includes 5 core functions: serialMapping, awaitedMapping, parallelMapping, generateMappingAsync, and generateMapping. These functions each take a collection of items as their main input, along with 4 delegate functions: transformFn, lookupFn, validateFn, and errLookupFn. The package defines several aliases to simplify the documentation and make it easier for readers to understand the types and functions. The package also defines a type called Settled<T>, which is analogous to the TypeScript type PromiseSettledResult<T>. Settled<T> has two sides: a "bad" type called SettledLeft, which represents a rejected promise, and a "good" type called SettledRight<T>, which represents a fulfilled promise.



/*
ok thanks, in any case without any exception the single most basic unit of data is the union type Base<TBase> but in the context of the core functions (the 5 tools of the bundle) this is not a collection, this is a single item, so if you have a collection of items it will not be relevant for the moment to think of it alone as we are thinking about the collection as a whole.

we can think of collections as iterables that can contain
Base<B> | Deferred<B>

which are like:
Iterable<Base<B>> | Iterable<Deferred<B>>

and as another concept we can think of this kind of union:
Iterable<Base<B>> | Iterable<Deferred<B>>
union with
Deferred<Iterable<Base<B>> | Iterable<Deferred<B>>>

Using 'Aggregation' for the moment to illustrate the concept:
(Aggregation is a temporary placeholder used only to represent or replace the word Collection temporary)

We should have:
Aggregation<Base<B>> | Aggregation<Deferred<B>>
and we also could have:
Deferred<Aggregation<Base<B>> | Aggregation<Deferred<B>>>

this can be a single item or it can be a collection of many of this single item, then you can never have the single item  so for the moment it means that we can have collections that hold either Base<B> | Deferred<B> but not both this is valid (Iterable<Base<B>> | Iterable<Deferred<B>>) but this is not (Iterable<Base<B> | Deferred<B>>) and you can also have as another concept the union of Iterable<Base<B>> | Iterable<Deferred<B>> | Deferred<Iterable<Base<B>> | Iterable<Deferred<B>>> can you summarise what so-called shapes exist so far and/or if you know of any so-clled shapes that are irrelevant, impossible or prohibited (in the context of the collections or iterables) so far.


 */
